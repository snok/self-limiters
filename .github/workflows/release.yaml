# Stolen and adapted from https://github.com/pydantic/pydantic-core/blob/main/.github/workflows/ci.yml
name: release

on:
  release:
    types: [published, edited]

jobs:
  build:
    name: build on ${{ matrix.platform || matrix.os }} (${{ matrix.target }} - ${{ matrix.manylinux || 'auto' }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir
            interpreter: 3.7 3.8 3.9 3.10
          - os: windows
            ls: dir
            target: i686
            python-architecture: x86
            interpreter: 3.7 3.8 3.9 3.10
          - os: macos
            target: aarch64
            interpreter: 3.7 3.8 3.9 3.10
          - os: ubuntu
            platform: linux
            target: i686
          # GCC 4.8.5 in manylinux2014 container doesn't support c11 atomic
          # we use manylinux_2_24 container for aarch64 and armv7 targets instead,
          - os: ubuntu
            platform: linux
            target: aarch64
            container: messense/manylinux_2_24-cross:aarch64
          - os: ubuntu
            platform: linux
            target: armv7
            container: messense/manylinux_2_24-cross:armv7
            interpreter: 3.7 3.8 3.9 3.10
          # musllinux
          - os: ubuntu
            platform: linux
            target: x86_64
            manylinux: musllinux_1_1
          - os: ubuntu
            platform: linux
            target: aarch64
            manylinux: musllinux_1_1
        exclude:
          # Windows on arm64 only supports Python 3.11+
          - os: windows
            target: aarch64

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - name: set package version
        run: python .github/set_version.py

      - name: sync Cargo.lock
        run: cargo update -p self-limiters
        if: "startsWith(github.ref, 'refs/tags/')"

      - run: pip install -U twine 'black>=22.3.0,<23' typing_extensions

      - name: build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux || 'auto' }}
          container: ${{ matrix.container }}
          args: --release --out dist --interpreter ${{ matrix.interpreter || '3.7 3.8 3.9 3.10' }}
          rust-toolchain: stable

      - run: ${{ matrix.ls || 'ls -lh' }} dist/
      - run: twine check dist/*
      - uses: actions/upload-artifact@v3
        with:
          name: pypi_files
          path: dist

  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: pip install -U twine
      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist
      - run: twine check dist/*
      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
